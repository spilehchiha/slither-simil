"('golem', 'contracts/GolemNetworkTokenBatching_inst.sol', 'GolemNetworkTokenBatching', 'batchTransfer')","['index(uint256)', '(local_solc_variable(default)):=(reference(uint256))', 'type_conversion(address)', '(local_solc_variable(default)):=(temporary_variable)', 'type_conversion(uint256)', 'binary(**)', 'binary(/)', '(local_solc_variable(default)):=(temporary_variable)', 'binary(<=)', 'solidity_call(require(bool))', 'index(uint256)', 'binary(+)', 'binary(-)', 'event', 'index(uint256)', '(reference(uint256)):=(local_solc_variable(default))']"
"('golem', 'contracts/GolemNetworkTokenBatching_inst.sol', 'TokenProxy', 'withdraw')",['internal_call(tuple)']
"('golem', 'contracts/TokenProxy.sol', 'TokenProxy', 'transferFromGate')","['(local_solc_variable(default)):=(solidity_variable_composed(msg.sender))', 'index(address)', '(local_solc_variable(default)):=(reference(address))', 'binary(!=)', 'solidity_call(require(bool))', 'high_level_call', '(local_solc_variable(default)):=(temporary_variable)', 'type_conversion(user_defined_type)', 'high_level_call', 'binary(+)', 'index(uint256)', 'binary(+)', 'event']"
"('golem', 'contracts/GNTDeposit.sol', 'GNTDeposit', 'burn')","['internal_call(tuple)', 'event', 'internal_call(Modifier)']"
"('golem', 'contracts/GNTDeposit.sol', 'GNTDeposit', 'withdraw')","['index(uint256)', '(local_solc_variable(default)):=(reference(uint256))', 'index(uint256)', '(reference(uint256)):=(constant(uint256))', 'index(uint256)', '(reference(uint256)):=(constant(uint256))', 'high_level_call', 'solidity_call(require(bool))', 'event', 'internal_call(Modifier)']"
"('golem', 'contracts/GNTDeposit.sol', 'GNTDeposit', 'onTokenReceived')","['index(uint256)', 'binary(+)', 'event', 'internal_call(Modifier)']"
"('nomisma', 'BankProtcol/contracts/BankInitialise.sol', 'BankInitialise', 'preinit')","['index(address)', 'type_conversion(user_defined_type)', '(state_solc_variable(user_defined_type)):=(temporary_variable)', 'internal_call(tuple)', 'index(address)', 'type_conversion(user_defined_type)', '(state_solc_variable(user_defined_type)):=(temporary_variable)', 'index(address)', 'type_conversion(user_defined_type)', '(state_solc_variable(user_defined_type)):=(temporary_variable)', 'index(address)', 'type_conversion(user_defined_type)', '(state_solc_variable(user_defined_type)):=(temporary_variable)', 'index(address)', '(state_solc_variable(address)):=(reference(address))', 'internal_call(tuple)', 'index(address)', 'index(address)', 'internal_call(tuple)', 'index(uint256)', 'binary(>)', 'solidity_call(require(bool))', 'index(uint256)', 'binary(<)', 'solidity_call(require(bool))', 'index(uint256)', 'binary(<)', 'solidity_call(require(bool))', 'index(uint256)', 'binary(<)', 'solidity_call(require(bool))', 'index(uint256)', 'binary(==)', 'solidity_call(require(bool))', 'index(uint256)', 'index(uint256)', '(reference(uint256)):=(reference(uint256))', 'index(uint256)', '(reference(uint256)):=(constant(uint256))', 'index(uint256)', 'index(uint256)', '(reference(uint256)):=(reference(uint256))', 'index(uint256)', 'index(uint256)', '(reference(uint256)):=(reference(uint256))', 'index(address)', 'type_conversion(user_defined_type)', '(state_solc_variable(user_defined_type)):=(temporary_variable)', 'type_conversion(address)', 'internal_call(tuple)', 'index(uint256)', 'index(uint256)', 'index(uint256)', 'index(address)', 'internal_call(tuple)', 'return']"
"('nomisma', 'BankProtcol/contracts/BankBorrow.sol', 'BankBorrow', 'updatePaybackAmountsState')","['(local_solc_variable(default)):=(constant(uint256))', 'length', 'binary(<)', 'condition(temporary_variable)', 'index(uint256)', 'index(struct)', '(local_solc_variable(memory)):=(reference(user_defined_type))', 'index(uint256)', 'internal_call(uint256)', '(local_solc_variable(default)):=(temporary_variable)', 'member', 'index(uint256)', 'library_call', '(local_solc_variable(default)):=(temporary_variable)', 'index(uint256)', 'internal_call(bool)', 'binary(==)', 'condition(temporary_variable)', 'index(uint256)', 'index(struct)', 'member', '(reference(uint256)):=(constant(uint256))', 'member', 'type_conversion(address)', 'binary(==)', 'condition(temporary_variable)', 'member', 'transfer(reference(uint256))', 'high_level_call', 'member', 'type_conversion(address)', 'member', 'solidity_call(abi.encodeWithSignature())', 'low_level_call', 'solidity_call(require(bool,string))', '(temporary_variable):=(local_solc_variable(default))', 'binary(+)']"
"('nomisma', 'BankProtcol/contracts/BankBorrow.sol', 'BankBorrow', 'payBackLoans')","['internal_call(uint256)', '(local_solc_variable(default)):=(temporary_variable)', 'high_level_call', '(local_solc_variable(default)):=(temporary_variable)', 'internal_call(tuple)', 'internal_call(tuple)']"
"('nomisma', 'BankProtcol/contracts/BankBorrow.sol', 'BankBorrow', 'borrow')","['index(uint256)', 'binary(<)', 'solidity_call(require(bool))', 'index(uint256[])', 'length', 'binary(<)', 'solidity_call(require(bool,string))', 'length', 'binary(<)', 'solidity_call(require(bool,string))', 'index(uint256[])', 'length', 'binary(>)', 'solidity_call(require(bool,string))', 'index(uint256[])', 'index(uint256)', '(local_solc_variable(default)):=(reference(uint256))', 'internal_call(uint256)', '(local_solc_variable(default)):=(temporary_variable)', 'binary(>)', 'solidity_call(require(bool,string))', 'high_level_call', '(local_solc_variable(default)):=(temporary_variable)', 'type_conversion(address)', 'binary(==)', 'condition(temporary_variable)', 'binary(==)', 'solidity_call(require(bool,string))', 'high_level_call', 'solidity_call(require(bool,string))', 'index(uint256)', 'index(uint256)', 'library_call', '(reference(uint256)):=(temporary_variable)', 'internal_call(bool)', 'solidity_call(require(bool))', 'type_conversion(address)', 'binary(==)', 'condition(temporary_variable)', 'transfer(local_solc_variable(default))', 'high_level_call', 'type_conversion(address)', 'solidity_call(abi.encodeWithSignature())', 'low_level_call', 'solidity_call(require(bool,string))']"
"('nomisma', 'BankProtcol/contracts/BankRedeem.sol', 'BankRedeem', 'settleEther')","['index(struct)', 'member', '(local_solc_variable(default)):=(reference(uint256))', 'index(struct)', 'member', 'type_conversion(address)', 'high_level_call', 'return']"
"('nomisma', 'BankProtcol/contracts/BankRedeem.sol', 'BankRedeem', 'settleErc20')","['index(struct)', 'member', '(local_solc_variable(default)):=(reference(uint256))', 'high_level_call', 'index(struct)', 'member', 'type_conversion(address)', 'type_conversion(address)', 'solidity_call(abi.encodeWithSignature())', 'low_level_call', 'solidity_call(require(bool,string))', 'index(struct)', 'member', 'type_conversion(address)', 'high_level_call', 'return']"
"('nomisma', 'BankProtcol/contracts/BankBorrow.sol', 'BankBorrow', 'collectPaybackAmount')","['type_conversion(address)', 'binary(==)', 'condition(temporary_variable)', 'binary(==)', 'solidity_call(require(bool))', 'type_conversion(address)', 'high_level_call', 'solidity_call(require(bool))']"
"('nomisma', 'BankProtcol/contracts/BankInitialise.sol', 'BankInitialise', 'depositInitEquity')","['high_level_call', '(local_solc_variable(default)):=(temporary_variable)', 'index(uint256)', 'library_call', 'library_call', 'binary(<=)', 'solidity_call(require(bool))', 'type_conversion(address)', 'binary(==)', 'condition(temporary_variable)', 'binary(>=)', 'solidity_call(require(bool))', 'library_call', 'binary(==)', 'solidity_call(require(bool))', 'transfer(local_solc_variable(memory))', 'high_level_call', '(local_solc_variable(default)):=(temporary_variable)', 'library_call', 'library_call', 'binary(>=)', 'solidity_call(require(bool))', 'library_call', 'high_level_call', 'solidity_call(require(bool))', 'high_level_call', 'type_conversion(address)', 'solidity_call(abi.encodeWithSignature())', 'low_level_call', 'solidity_call(require(bool,string))', 'index(uint256)', 'index(uint256)', 'library_call', '(reference(uint256)):=(temporary_variable)', 'high_level_call', 'high_level_call', 'solidity_call(require(bool))']"
"('nomisma', 'BankProtcol/contracts/BankInvest.sol', 'BankInvest', 'collectFunds')","['index(uint256)', 'binary(<)', 'solidity_call(require(bool))', 'binary(>)', 'solidity_call(require(bool))', 'binary(>)', 'solidity_call(require(bool))', 'index(uint256)', 'library_call', 'library_call', 'binary(<=)', 'solidity_call(require(bool))', 'type_conversion(address)', 'high_level_call', 'binary(==)', 'condition(temporary_variable)', 'library_call', 'binary(==)', 'solidity_call(require(bool))', 'transfer(local_solc_variable(memory))', 'library_call', 'high_level_call', 'solidity_call(require(bool))', 'high_level_call', 'type_conversion(address)', 'solidity_call(abi.encodeWithSignature())', 'low_level_call', 'solidity_call(require(bool,string))']"
"('paxos', 'contracts/PAXImplementation.sol', 'PAXImplementation', 'setSupplyController')","['binary(==)', 'binary(==)', 'binary(||)', 'solidity_call(require(bool,string))', 'type_conversion(address)', 'binary(!=)', 'solidity_call(require(bool,string))', 'event', '(state_solc_variable(address)):=(local_solc_variable(memory))']"
"('paxos', 'contracts/PAXImplementation.sol', 'PAXImplementation', 'increaseSupply')","['library_call', '(state_solc_variable(uint256)):=(temporary_variable)', 'index(uint256)', 'index(uint256)', 'library_call', '(reference(uint256)):=(temporary_variable)', 'event', 'type_conversion(address)', 'event', 'return', 'internal_call(Modifier)']"
"('paxos', 'contracts/PAXImplementation.sol', 'PAXImplementation', 'decreaseSupply')","['index(uint256)', 'binary(<=)', 'solidity_call(require(bool,string))', 'index(uint256)', 'index(uint256)', 'library_call', '(reference(uint256)):=(temporary_variable)', 'library_call', '(state_solc_variable(uint256)):=(temporary_variable)', 'event', 'type_conversion(address)', 'event', 'return', 'internal_call(Modifier)']"
"('paxos', 'contracts/PAXImplementation.sol', 'PAXImplementation', 'wipeFrozenAddress')","['index(bool)', 'solidity_call(require(bool,string))', 'index(uint256)', '(local_solc_variable(default)):=(reference(uint256))', 'index(uint256)', '(reference(uint256)):=(constant(uint256))', 'library_call', '(state_solc_variable(uint256)):=(temporary_variable)', 'event', 'event', 'type_conversion(address)', 'event', 'internal_call(Modifier)']"
"('paxos', 'contracts/PAXImplementation.sol', 'PAXImplementation', 'setLawEnforcementRole')","['binary(==)', 'binary(==)', 'binary(||)', 'solidity_call(require(bool,string))', 'event', '(state_solc_variable(address)):=(local_solc_variable(memory))']"
"('paxos', 'contracts/PAXImplementation.sol', 'PAXImplementation', 'transfer')","['type_conversion(address)', 'binary(!=)', 'solidity_call(require(bool,string))', 'index(bool)', 'unary(!)', 'index(bool)', 'unary(!)', 'binary(&&)', 'solidity_call(require(bool,string))', 'index(uint256)', 'binary(<=)', 'solidity_call(require(bool,string))', 'index(uint256)', 'index(uint256)', 'library_call', '(reference(uint256)):=(temporary_variable)', 'index(uint256)', 'index(uint256)', 'library_call', '(reference(uint256)):=(temporary_variable)', 'event', 'return', 'internal_call(Modifier)']"
"('ampleforth', 'market-oracle/contracts/MarketOracle.sol', 'MarketOracle', 'getPriceAnd24HourVolume')","['(local_solc_variable(default)):=(constant(uint256))', '(local_solc_variable(default)):=(constant(uint256))', '(local_solc_variable(default)):=(constant(uint256))', '(local_solc_variable(default)):=(constant(uint256))', '(local_solc_variable(default)):=(constant(bool))', '(local_solc_variable(default)):=(constant(uint256))', 'length', 'binary(<)', 'condition(temporary_variable)', 'index(contract)', 'high_level_call', 'unpack', 'unpack', 'unpack', 'unary(!)', 'condition(temporary_variable)', 'index(contract)', 'event', 'library_call', 'library_call', '(local_solc_variable(default)):=(temporary_variable)', 'library_call', '(local_solc_variable(default)):=(temporary_variable)', '(temporary_variable):=(local_solc_variable(default))', 'binary(+)', 'library_call', '(local_solc_variable(default)):=(temporary_variable)', 'return']"
"('ampleforth', 'market-oracle/contracts/MarketOracle.sol', 'MarketOracle', 'removeSourceAtIndex')","['index(contract)', 'event', 'length', 'binary(-)', 'binary(!=)', 'condition(temporary_variable)', 'index(contract)', 'length', 'binary(-)', 'index(contract)', '(reference(user_defined_type)):=(reference(user_defined_type))', 'length', '(temporary_variable):=(reference(uint256))', 'binary(-)']"
"('origin-protocol', 'origin-contracts/contracts/marketplace/v00/Marketplace.sol', 'V00_Marketplace', '_createListing')","['binary(!=)', 'solidity_call(require(bool,string))', 'new_structure', 'push(temporary_variable,state_solc_variable(user_defined_array))', 'length', 'binary(>)', 'condition(temporary_variable)', 'high_level_call', 'length', 'binary(-)', 'event']"
"('origin-protocol', 'origin-contracts/contracts/marketplace/v00/Marketplace.sol', 'V00_Marketplace', 'withdrawListing')","['index(struct)', '(local_solc_variable(storage)):=(reference(user_defined_type))', 'member', 'binary(==)', 'solidity_call(require(bool,string))', 'binary(!=)', 'solidity_call(require(bool,string))', 'member', 'high_level_call', 'event']"
"('origin-protocol', 'origin-contracts/contracts/marketplace/v00/Marketplace.sol', 'V00_Marketplace', 'dispute')","['index(struct)', '(local_solc_variable(storage)):=(reference(user_defined_type))', 'index(struct)', 'index(struct)', '(local_solc_variable(storage)):=(reference(user_defined_type))', 'member', 'binary(==)', 'member', 'binary(==)', 'binary(||)', 'solidity_call(require(bool,string))', 'member', 'binary(==)', 'solidity_call(require(bool,string))', 'member', 'binary(<=)', 'solidity_call(require(bool,string))', 'member', '(reference(uint8)):=(constant(uint256))', 'event']"
"('origin-protocol', 'origin-contracts/contracts/marketplace/v00/Marketplace.sol', 'V00_Marketplace', 'finalize')","['index(struct)', '(local_solc_variable(storage)):=(reference(user_defined_type))', 'index(struct)', 'index(struct)', '(local_solc_variable(storage)):=(reference(user_defined_type))', 'member', 'binary(<=)', 'condition(temporary_variable)', 'member', 'binary(==)', 'solidity_call(require(bool,string))', 'member', 'binary(==)', 'member', 'binary(==)', 'binary(||)', 'solidity_call(require(bool,string))', 'member', 'binary(==)', 'solidity_call(require(bool,string))', 'internal_call(tuple)', 'member', 'binary(==)', 'condition(temporary_variable)', 'internal_call(tuple)', 'event', 'index(struct)', 'index(struct)', 'delete(reference(user_defined_array),reference(user_defined_type))']"
"('origin-protocol', 'origin-contracts/contracts/marketplace/v00/Marketplace.sol', 'V00_Marketplace', 'makeOffer')","['type_conversion(address)', 'index(bool)', '(local_solc_variable(default)):=(reference(bool))', 'index(bool)', 'binary(||)', 'solidity_call(require(bool,string))', 'binary(==)', 'condition(temporary_variable)', 'binary(==)', 'solidity_call(require(bool,string))', 'index(struct)', 'new_structure', 'push(temporary_variable,reference(user_defined_array))', 'length', 'type_conversion(address)', 'binary(==)', 'condition(temporary_variable)', 'binary(==)', 'solidity_call(require(bool,string))', 'binary(==)', 'solidity_call(require(bool,string))', 'high_level_call', 'solidity_call(require(bool,string))', 'index(struct)', 'length', 'binary(-)', 'event']"
"('origin-protocol', 'origin-contracts/contracts/marketplace/v00/Marketplace.sol', 'V00_Marketplace', 'paySeller')","['index(struct)', '(local_solc_variable(storage)):=(reference(user_defined_type))', 'index(struct)', 'index(struct)', '(local_solc_variable(storage)):=(reference(user_defined_type))', 'member', 'member', 'binary(-)', '(local_solc_variable(default)):=(temporary_variable)', 'member', 'type_conversion(address)', 'binary(==)', 'condition(temporary_variable)', 'member', 'member', 'send(reference(uint256))', 'solidity_call(require(bool,string))', 'member', 'send(local_solc_variable(default))', 'solidity_call(require(bool,string))', 'member', 'member', 'member', 'high_level_call', 'solidity_call(require(bool,string))', 'member', 'member', 'high_level_call', 'solidity_call(require(bool,string))']"
