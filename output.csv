"('golem', 'contracts/GolemNetworkTokenBatching_inst.sol', 'GolemNetworkTokenBatching', 'batchTransfer')","['index(uint256)', '(local_solc_variable(default, uint256)):=(reference(uint256))', 'type_conversion(address)', '(local_solc_variable(default, address)):=(temporary_variable(address))', 'type_conversion(uint256)', 'binary(**)', 'binary(/)', '(local_solc_variable(default, uint256)):=(temporary_variable(uint256))', 'binary(<=)', 'solidity_call(require(bool))', 'index(uint256)', 'binary(+)', 'binary(-)', 'event', 'index(uint256)', '(reference(uint256)):=(local_solc_variable(default, uint256))']"
"('golem', 'contracts/GolemNetworkTokenBatching_inst.sol', 'TokenProxy', 'withdraw')",['internal_call(tuple)']
"('golem', 'contracts/TokenProxy.sol', 'TokenProxy', 'transferFromGate')","['(local_solc_variable(default, address)):=(solidity_variable_composed(msg.sender))', 'index(address)', '(local_solc_variable(default, address)):=(reference(address))', 'binary(!=)', 'solidity_call(require(bool))', 'high_level_call', '(local_solc_variable(default, uint256)):=(temporary_variable(uint256))', 'type_conversion(user_defined_type)', 'high_level_call', 'binary(+)', 'index(uint256)', 'binary(+)', 'event']"
"('golem', 'contracts/GNTDeposit.sol', 'GNTDeposit', 'burn')","['internal_call(tuple)', 'event', 'internal_call(Modifier)']"
"('golem', 'contracts/GNTDeposit.sol', 'GNTDeposit', 'withdraw')","['index(uint256)', '(local_solc_variable(default, uint256)):=(reference(uint256))', 'index(uint256)', '(reference(uint256)):=(constant(uint256))', 'index(uint256)', '(reference(uint256)):=(constant(uint256))', 'high_level_call', 'solidity_call(require(bool))', 'event', 'internal_call(Modifier)']"
"('golem', 'contracts/GNTDeposit.sol', 'GNTDeposit', 'onTokenReceived')","['index(uint256)', 'binary(+)', 'event', 'internal_call(Modifier)']"
"('nomisma', 'BankProtcol/contracts/BankInitialise.sol', 'BankInitialise', 'preinit')","['index(address)', 'type_conversion(user_defined_type)', '(state_solc_variable(user_defined_type)):=(temporary_variable(user_defined_type))', 'internal_call(tuple)', 'index(address)', 'type_conversion(user_defined_type)', '(state_solc_variable(user_defined_type)):=(temporary_variable(user_defined_type))', 'index(address)', 'type_conversion(user_defined_type)', '(state_solc_variable(user_defined_type)):=(temporary_variable(user_defined_type))', 'index(address)', 'type_conversion(user_defined_type)', '(state_solc_variable(user_defined_type)):=(temporary_variable(user_defined_type))', 'index(address)', '(state_solc_variable(address)):=(reference(address))', 'internal_call(tuple)', 'index(address)', 'index(address)', 'internal_call(tuple)', 'index(uint256)', 'binary(>)', 'solidity_call(require(bool))', 'index(uint256)', 'binary(<)', 'solidity_call(require(bool))', 'index(uint256)', 'binary(<)', 'solidity_call(require(bool))', 'index(uint256)', 'binary(<)', 'solidity_call(require(bool))', 'index(uint256)', 'binary(==)', 'solidity_call(require(bool))', 'index(uint256)', 'index(uint256)', '(reference(uint256)):=(reference(uint256))', 'index(uint256)', '(reference(uint256)):=(constant(uint256))', 'index(uint256)', 'index(uint256)', '(reference(uint256)):=(reference(uint256))', 'index(uint256)', 'index(uint256)', '(reference(uint256)):=(reference(uint256))', 'index(address)', 'type_conversion(user_defined_type)', '(state_solc_variable(user_defined_type)):=(temporary_variable(user_defined_type))', 'type_conversion(address)', 'internal_call(tuple)', 'index(uint256)', 'index(uint256)', 'index(uint256)', 'index(address)', 'internal_call(tuple)', 'return']"
"('nomisma', 'BankProtcol/contracts/BankBorrow.sol', 'BankBorrow', 'updatePaybackAmountsState')","['(local_solc_variable(default, uint256)):=(constant(uint256))', 'length', 'binary(<)', 'condition(temporary_variable(bool))', 'index(uint256)', 'index(struct)', '(local_solc_variable(memory, BankLoan.Loan)):=(reference(user_defined_type))', 'index(uint256)', 'internal_call(uint256)', '(local_solc_variable(default, uint256)):=(temporary_variable(uint256))', 'member', 'index(uint256)', 'library_call_SafeMath_add', '(local_solc_variable(default, uint256)):=(temporary_variable(uint256))', 'index(uint256)', 'internal_call(bool)', 'binary(==)', 'condition(temporary_variable(bool))', 'index(uint256)', 'index(struct)', 'member', '(reference(uint256)):=(constant(uint256))', 'member', 'type_conversion(address)', 'binary(==)', 'condition(temporary_variable(bool))', 'member', 'transfer(reference(uint256))', 'high_level_call', 'member', 'type_conversion(address)', 'member', 'solidity_call(abi.encodeWithSignature())', 'low_level_call', 'solidity_call(require(bool,string))', '(temporary_variable(uint256)):=(local_solc_variable(default, uint256))', 'binary(+)']"
"('nomisma', 'BankProtcol/contracts/BankBorrow.sol', 'BankBorrow', 'payBackLoans')","['internal_call(uint256)', '(local_solc_variable(default, uint256)):=(temporary_variable(uint256))', 'high_level_call', '(local_solc_variable(default, address)):=(temporary_variable(address))', 'internal_call(tuple)', 'internal_call(tuple)']"
"('nomisma', 'BankProtcol/contracts/BankBorrow.sol', 'BankBorrow', 'borrow')","['index(uint256)', 'binary(<)', 'solidity_call(require(bool))', 'index(uint256[])', 'length', 'binary(<)', 'solidity_call(require(bool,string))', 'length', 'binary(<)', 'solidity_call(require(bool,string))', 'index(uint256[])', 'length', 'binary(>)', 'solidity_call(require(bool,string))', 'index(uint256[])', 'index(uint256)', '(local_solc_variable(default, uint256)):=(reference(uint256))', 'internal_call(uint256)', '(local_solc_variable(default, uint256)):=(temporary_variable(uint256))', 'binary(>)', 'solidity_call(require(bool,string))', 'high_level_call', '(local_solc_variable(default, address)):=(temporary_variable(address))', 'type_conversion(address)', 'binary(==)', 'condition(temporary_variable(bool))', 'binary(==)', 'solidity_call(require(bool,string))', 'high_level_call', 'solidity_call(require(bool,string))', 'index(uint256)', 'index(uint256)', 'library_call_SafeMath_add', '(reference(uint256)):=(temporary_variable(uint256))', 'internal_call(bool)', 'solidity_call(require(bool))', 'type_conversion(address)', 'binary(==)', 'condition(temporary_variable(bool))', 'transfer(local_solc_variable(default, uint256))', 'high_level_call', 'type_conversion(address)', 'solidity_call(abi.encodeWithSignature())', 'low_level_call', 'solidity_call(require(bool,string))']"
"('nomisma', 'BankProtcol/contracts/BankRedeem.sol', 'BankRedeem', 'settleEther')","['index(struct)', 'member', '(local_solc_variable(default, uint256)):=(reference(uint256))', 'index(struct)', 'member', 'type_conversion(address)', 'high_level_call', 'return']"
"('nomisma', 'BankProtcol/contracts/BankRedeem.sol', 'BankRedeem', 'settleErc20')","['index(struct)', 'member', '(local_solc_variable(default, uint256)):=(reference(uint256))', 'high_level_call', 'index(struct)', 'member', 'type_conversion(address)', 'type_conversion(address)', 'solidity_call(abi.encodeWithSignature())', 'low_level_call', 'solidity_call(require(bool,string))', 'index(struct)', 'member', 'type_conversion(address)', 'high_level_call', 'return']"
"('nomisma', 'BankProtcol/contracts/BankBorrow.sol', 'BankBorrow', 'collectPaybackAmount')","['type_conversion(address)', 'binary(==)', 'condition(temporary_variable(bool))', 'binary(==)', 'solidity_call(require(bool))', 'type_conversion(address)', 'high_level_call', 'solidity_call(require(bool))']"
"('nomisma', 'BankProtcol/contracts/BankInitialise.sol', 'BankInitialise', 'depositInitEquity')","['high_level_call', '(local_solc_variable(default, address)):=(temporary_variable(address))', 'index(uint256)', 'library_call_SafeMath_mul', 'library_call_SafeMath_div', 'binary(<=)', 'solidity_call(require(bool))', 'type_conversion(address)', 'binary(==)', 'condition(temporary_variable(bool))', 'binary(>=)', 'solidity_call(require(bool))', 'library_call_SafeMath_add', 'binary(==)', 'solidity_call(require(bool))', 'transfer(local_solc_variable(memory, uint256))', 'high_level_call', '(local_solc_variable(default, uint256)):=(temporary_variable(uint256))', 'library_call_SafeMath_mul', 'library_call_SafeMath_div', 'binary(>=)', 'solidity_call(require(bool))', 'library_call_SafeMath_add', 'high_level_call', 'solidity_call(require(bool))', 'high_level_call', 'type_conversion(address)', 'solidity_call(abi.encodeWithSignature())', 'low_level_call', 'solidity_call(require(bool,string))', 'index(uint256)', 'index(uint256)', 'library_call_SafeMath_add', '(reference(uint256)):=(temporary_variable(uint256))', 'high_level_call', 'high_level_call', 'solidity_call(require(bool))']"
"('nomisma', 'BankProtcol/contracts/BankInvest.sol', 'BankInvest', 'collectFunds')","['index(uint256)', 'binary(<)', 'solidity_call(require(bool))', 'binary(>)', 'solidity_call(require(bool))', 'binary(>)', 'solidity_call(require(bool))', 'index(uint256)', 'library_call_SafeMath_mul', 'library_call_SafeMath_div', 'binary(<=)', 'solidity_call(require(bool))', 'type_conversion(address)', 'high_level_call', 'binary(==)', 'condition(temporary_variable(bool))', 'library_call_SafeMath_add', 'binary(==)', 'solidity_call(require(bool))', 'transfer(local_solc_variable(memory, uint256))', 'library_call_SafeMath_add', 'high_level_call', 'solidity_call(require(bool))', 'high_level_call', 'type_conversion(address)', 'solidity_call(abi.encodeWithSignature())', 'low_level_call', 'solidity_call(require(bool,string))']"
"('paxos', 'contracts/PAXImplementation.sol', 'PAXImplementation', 'setSupplyController')","['binary(==)', 'binary(==)', 'binary(||)', 'solidity_call(require(bool,string))', 'type_conversion(address)', 'binary(!=)', 'solidity_call(require(bool,string))', 'event', '(state_solc_variable(address)):=(local_solc_variable(memory, address))']"
"('paxos', 'contracts/PAXImplementation.sol', 'PAXImplementation', 'increaseSupply')","['library_call_SafeMath_add', '(state_solc_variable(uint256)):=(temporary_variable(uint256))', 'index(uint256)', 'index(uint256)', 'library_call_SafeMath_add', '(reference(uint256)):=(temporary_variable(uint256))', 'event', 'type_conversion(address)', 'event', 'return', 'internal_call(Modifier)']"
"('paxos', 'contracts/PAXImplementation.sol', 'PAXImplementation', 'decreaseSupply')","['index(uint256)', 'binary(<=)', 'solidity_call(require(bool,string))', 'index(uint256)', 'index(uint256)', 'library_call_SafeMath_sub', '(reference(uint256)):=(temporary_variable(uint256))', 'library_call_SafeMath_sub', '(state_solc_variable(uint256)):=(temporary_variable(uint256))', 'event', 'type_conversion(address)', 'event', 'return', 'internal_call(Modifier)']"
"('paxos', 'contracts/PAXImplementation.sol', 'PAXImplementation', 'wipeFrozenAddress')","['index(bool)', 'solidity_call(require(bool,string))', 'index(uint256)', '(local_solc_variable(default, uint256)):=(reference(uint256))', 'index(uint256)', '(reference(uint256)):=(constant(uint256))', 'library_call_SafeMath_sub', '(state_solc_variable(uint256)):=(temporary_variable(uint256))', 'event', 'event', 'type_conversion(address)', 'event', 'internal_call(Modifier)']"
"('paxos', 'contracts/PAXImplementation.sol', 'PAXImplementation', 'setLawEnforcementRole')","['binary(==)', 'binary(==)', 'binary(||)', 'solidity_call(require(bool,string))', 'event', '(state_solc_variable(address)):=(local_solc_variable(memory, address))']"
"('paxos', 'contracts/PAXImplementation.sol', 'PAXImplementation', 'transfer')","['type_conversion(address)', 'binary(!=)', 'solidity_call(require(bool,string))', 'index(bool)', 'unary(!)', 'index(bool)', 'unary(!)', 'binary(&&)', 'solidity_call(require(bool,string))', 'index(uint256)', 'binary(<=)', 'solidity_call(require(bool,string))', 'index(uint256)', 'index(uint256)', 'library_call_SafeMath_sub', '(reference(uint256)):=(temporary_variable(uint256))', 'index(uint256)', 'index(uint256)', 'library_call_SafeMath_add', '(reference(uint256)):=(temporary_variable(uint256))', 'event', 'return', 'internal_call(Modifier)']"
"('ampleforth', 'market-oracle/contracts/MarketOracle.sol', 'MarketOracle', 'getPriceAnd24HourVolume')","['(local_solc_variable(default, uint256)):=(constant(uint256))', '(local_solc_variable(default, uint256)):=(constant(uint256))', '(local_solc_variable(default, uint256)):=(constant(uint256))', '(local_solc_variable(default, uint256)):=(constant(uint256))', '(local_solc_variable(default, bool)):=(constant(bool))', '(local_solc_variable(default, uint256)):=(constant(uint256))', 'length', 'binary(<)', 'condition(temporary_variable(bool))', 'index(contract)', 'high_level_call', 'unpack', 'unpack', 'unpack', 'unary(!)', 'condition(temporary_variable(bool))', 'index(contract)', 'event', 'library_call_SafeMath_mul', 'library_call_SafeMath_add', '(local_solc_variable(default, uint256)):=(temporary_variable(uint256))', 'library_call_SafeMath_add', '(local_solc_variable(default, uint256)):=(temporary_variable(uint256))', '(temporary_variable(uint256)):=(local_solc_variable(default, uint256))', 'binary(+)', 'library_call_SafeMath_div', '(local_solc_variable(default, uint256)):=(temporary_variable(uint256))', 'return']"
"('ampleforth', 'market-oracle/contracts/MarketOracle.sol', 'MarketOracle', 'removeSourceAtIndex')","['index(contract)', 'event', 'length', 'binary(-)', 'binary(!=)', 'condition(temporary_variable(bool))', 'index(contract)', 'length', 'binary(-)', 'index(contract)', '(reference(user_defined_type)):=(reference(user_defined_type))', 'length', '(temporary_variable(uint256)):=(reference(uint256))', 'binary(-)']"
"('origin-protocol', 'origin-contracts/contracts/marketplace/v00/Marketplace.sol', 'V00_Marketplace', '_createListing')","['binary(!=)', 'solidity_call(require(bool,string))', 'new_structure', 'push(temporary_variable(user_defined_type),state_solc_variable(user_defined_array))', 'length', 'binary(>)', 'condition(temporary_variable(bool))', 'high_level_call', 'length', 'binary(-)', 'event']"
"('origin-protocol', 'origin-contracts/contracts/marketplace/v00/Marketplace.sol', 'V00_Marketplace', 'withdrawListing')","['index(struct)', '(local_solc_variable(storage, V00_Marketplace.Listing)):=(reference(user_defined_type))', 'member', 'binary(==)', 'solidity_call(require(bool,string))', 'binary(!=)', 'solidity_call(require(bool,string))', 'member', 'high_level_call', 'event']"
"('origin-protocol', 'origin-contracts/contracts/marketplace/v00/Marketplace.sol', 'V00_Marketplace', 'dispute')","['index(struct)', '(local_solc_variable(storage, V00_Marketplace.Listing)):=(reference(user_defined_type))', 'index(struct)', 'index(struct)', '(local_solc_variable(storage, V00_Marketplace.Offer)):=(reference(user_defined_type))', 'member', 'binary(==)', 'member', 'binary(==)', 'binary(||)', 'solidity_call(require(bool,string))', 'member', 'binary(==)', 'solidity_call(require(bool,string))', 'member', 'binary(<=)', 'solidity_call(require(bool,string))', 'member', '(reference(uint8)):=(constant(uint256))', 'event']"
"('origin-protocol', 'origin-contracts/contracts/marketplace/v00/Marketplace.sol', 'V00_Marketplace', 'finalize')","['index(struct)', '(local_solc_variable(storage, V00_Marketplace.Listing)):=(reference(user_defined_type))', 'index(struct)', 'index(struct)', '(local_solc_variable(storage, V00_Marketplace.Offer)):=(reference(user_defined_type))', 'member', 'binary(<=)', 'condition(temporary_variable(bool))', 'member', 'binary(==)', 'solidity_call(require(bool,string))', 'member', 'binary(==)', 'member', 'binary(==)', 'binary(||)', 'solidity_call(require(bool,string))', 'member', 'binary(==)', 'solidity_call(require(bool,string))', 'internal_call(tuple)', 'member', 'binary(==)', 'condition(temporary_variable(bool))', 'internal_call(tuple)', 'event', 'index(struct)', 'index(struct)', 'delete(reference(user_defined_array),reference(user_defined_type))']"
"('origin-protocol', 'origin-contracts/contracts/marketplace/v00/Marketplace.sol', 'V00_Marketplace', 'makeOffer')","['type_conversion(address)', 'index(bool)', '(local_solc_variable(default, bool)):=(reference(bool))', 'index(bool)', 'binary(||)', 'solidity_call(require(bool,string))', 'binary(==)', 'condition(temporary_variable(bool))', 'binary(==)', 'solidity_call(require(bool,string))', 'index(struct)', 'new_structure', 'push(temporary_variable(user_defined_type),reference(user_defined_array))', 'length', 'type_conversion(address)', 'binary(==)', 'condition(temporary_variable(bool))', 'binary(==)', 'solidity_call(require(bool,string))', 'binary(==)', 'solidity_call(require(bool,string))', 'high_level_call', 'solidity_call(require(bool,string))', 'index(struct)', 'length', 'binary(-)', 'event']"
"('origin-protocol', 'origin-contracts/contracts/marketplace/v00/Marketplace.sol', 'V00_Marketplace', 'paySeller')","['index(struct)', '(local_solc_variable(storage, V00_Marketplace.Listing)):=(reference(user_defined_type))', 'index(struct)', 'index(struct)', '(local_solc_variable(storage, V00_Marketplace.Offer)):=(reference(user_defined_type))', 'member', 'member', 'binary(-)', '(local_solc_variable(default, uint256)):=(temporary_variable(uint256))', 'member', 'type_conversion(address)', 'binary(==)', 'condition(temporary_variable(bool))', 'member', 'member', 'send(reference(uint256))', 'solidity_call(require(bool,string))', 'member', 'send(local_solc_variable(default, uint256))', 'solidity_call(require(bool,string))', 'member', 'member', 'member', 'high_level_call', 'solidity_call(require(bool,string))', 'member', 'member', 'high_level_call', 'solidity_call(require(bool,string))']"
"('celo', 'contracts/common/Proxy.sol', 'Proxy', '_setAndInitializeImplementation')","['internal_call(tuple)', 'low_level_call', 'unpack', 'unpack', 'solidity_call(require(bool,string))', 'internal_call(Modifier)']"
"('celo', 'contracts/common/MultiSig.sol', 'MultiSig', 'external_call')",['return']
"('celo', 'contracts/governance/Governance.sol', 'Governance', 'externalCall')","['return', 'internal_call(Modifier)']"
"('celo', 'contracts/governance/LinkedList.sol', 'LinkedList', 'insert')","['type_conversion(bytes32)', 'binary(!=)', 'solidity_call(require(bool,string))', 'internal_call(bool)', 'unary(!)', 'solidity_call(require(bool,string))', 'member', 'index(struct)', '(local_solc_variable(storage, LinkedList.Element)):=(reference(user_defined_type))', 'member', '(reference(bool)):=(constant(bool))', 'member', 'binary(==)', 'condition(temporary_variable(bool))', 'member', '(reference(bytes32)):=(local_solc_variable(memory, bytes32))', 'member', '(reference(bytes32)):=(local_solc_variable(memory, bytes32))', 'type_conversion(bytes32)', 'binary(!=)', 'type_conversion(bytes32)', 'binary(!=)', 'binary(||)', 'solidity_call(require(bool,string))', 'member', '(reference(bytes32)):=(local_solc_variable(memory, bytes32))', 'member', '(reference(bytes32)):=(local_solc_variable(memory, bytes32))', 'type_conversion(bytes32)', 'binary(!=)', 'condition(temporary_variable(bool))', 'internal_call(bool)', 'solidity_call(require(bool,string))', 'member', 'index(struct)', '(local_solc_variable(storage, LinkedList.Element)):=(reference(user_defined_type))', 'member', 'binary(==)', 'solidity_call(require(bool,string))', 'member', '(reference(bytes32)):=(local_solc_variable(memory, bytes32))', 'member', '(reference(bytes32)):=(local_solc_variable(memory, bytes32))', 'type_conversion(bytes32)', 'binary(!=)', 'condition(temporary_variable(bool))', 'internal_call(bool)', 'solidity_call(require(bool,string))', 'member', 'index(struct)', '(local_solc_variable(storage, LinkedList.Element)):=(reference(user_defined_type))', 'member', 'binary(==)', 'solidity_call(require(bool,string))', 'member', '(reference(bytes32)):=(local_solc_variable(memory, bytes32))', 'member', '(reference(bytes32)):=(local_solc_variable(memory, bytes32))', 'member', 'member', 'library_call_SafeMath_add', '(reference(uint256)):=(temporary_variable(uint256))']"
"('celo', 'contracts/governance/BondedDeposits.sol', 'BondedDeposits', 'updateBondedDeposit')","['member', 'member', 'index(struct)', '(local_solc_variable(storage, BondedDeposits.Deposit)):=(reference(user_defined_type))', 'member', 'binary(!=)', 'solidity_call(require(bool))', 'member', 'binary(==)', 'condition(temporary_variable(bool))', 'member', 'member', 'member', 'length', 'type_conversion(uint128)', '(reference(uint128)):=(temporary_variable(uint128))', 'member', 'type_conversion(uint128)', '(reference(uint128)):=(temporary_variable(uint128))', 'member', 'member', 'push(local_solc_variable(memory, uint256),reference(uint256[]))', 'length', 'internal_call(uint256)', '(local_solc_variable(default, uint256)):=(temporary_variable(uint256))', 'member', 'member', 'library_call_SafeMath_add', '(reference(uint256)):=(temporary_variable(uint256))', 'library_call_SafeMath_add', '(state_solc_variable(uint256)):=(temporary_variable(uint256))', 'binary(==)', 'condition(temporary_variable(bool))', 'member', 'internal_call(uint256)', '(local_solc_variable(default, uint256)):=(temporary_variable(uint256))', 'member', 'member', 'library_call_SafeMath_sub', '(reference(uint256)):=(temporary_variable(uint256))', 'library_call_SafeMath_sub', '(state_solc_variable(uint256)):=(temporary_variable(uint256))', 'member', 'member', 'internal_call(tuple)', 'member', 'internal_call(uint256)', '(local_solc_variable(default, uint256)):=(temporary_variable(uint256))', 'internal_call(uint256)', '(local_solc_variable(default, uint256)):=(temporary_variable(uint256))', 'binary(>=)', 'condition(temporary_variable(bool))', 'library_call_SafeMath_sub', '(local_solc_variable(default, uint256)):=(temporary_variable(uint256))', 'member', 'member', 'library_call_SafeMath_add', '(reference(uint256)):=(temporary_variable(uint256))', 'library_call_SafeMath_add', '(state_solc_variable(uint256)):=(temporary_variable(uint256))', 'library_call_SafeMath_sub', '(local_solc_variable(default, uint256)):=(temporary_variable(uint256))', 'member', 'member', 'library_call_SafeMath_sub', '(reference(uint256)):=(temporary_variable(uint256))', 'library_call_SafeMath_sub', '(state_solc_variable(uint256)):=(temporary_variable(uint256))', 'member', 'type_conversion(uint128)', '(reference(uint128)):=(temporary_variable(uint128))']"
"('celo', 'contracts/governance/BondedDeposits.sol', 'BondedDeposits', 'updateNotifiedDeposit')","['member', 'member', 'index(struct)', '(local_solc_variable(storage, BondedDeposits.Deposit)):=(reference(user_defined_type))', 'member', 'binary(!=)', 'solidity_call(require(bool))', 'member', 'binary(==)', 'condition(temporary_variable(bool))', 'member', 'member', 'member', 'length', 'type_conversion(uint128)', '(reference(uint128)):=(temporary_variable(uint128))', 'member', 'type_conversion(uint128)', '(reference(uint128)):=(temporary_variable(uint128))', 'member', 'member', 'push(local_solc_variable(memory, uint256),reference(uint256[]))', 'length', 'member', 'member', 'member', 'library_call_SafeMath_add', '(reference(uint256)):=(temporary_variable(uint256))', 'member', 'library_call_SafeMath_add', '(state_solc_variable(uint256)):=(temporary_variable(uint256))', 'binary(==)', 'condition(temporary_variable(bool))', 'member', 'member', 'member', 'library_call_SafeMath_sub', '(reference(uint256)):=(temporary_variable(uint256))', 'member', 'library_call_SafeMath_sub', '(state_solc_variable(uint256)):=(temporary_variable(uint256))', 'member', 'member', 'internal_call(tuple)', 'member', 'binary(>=)', 'condition(temporary_variable(bool))', 'member', 'library_call_SafeMath_sub', '(local_solc_variable(default, uint256)):=(temporary_variable(uint256))', 'member', 'member', 'library_call_SafeMath_add', '(reference(uint256)):=(temporary_variable(uint256))', 'library_call_SafeMath_add', '(state_solc_variable(uint256)):=(temporary_variable(uint256))', 'member', 'type_conversion(uint256)', 'library_call_SafeMath_sub', '(local_solc_variable(default, uint256)):=(temporary_variable(uint256))', 'member', 'member', 'library_call_SafeMath_sub', '(reference(uint256)):=(temporary_variable(uint256))', 'library_call_SafeMath_sub', '(state_solc_variable(uint256)):=(temporary_variable(uint256))', 'member', 'type_conversion(uint128)', '(reference(uint128)):=(temporary_variable(uint128))']"
"('celo', 'contracts/governance/BondedDeposits.sol', 'BondedDeposits', 'createAccount')","['internal_call(bool)', 'internal_call(bool)', 'binary(&&)', 'solidity_call(require(bool))', 'index(struct)', '(local_solc_variable(storage, BondedDeposits.Account)):=(reference(user_defined_type))', 'member', '(reference(bool)):=(constant(bool))', 'member', 'type_conversion(uint96)', '(reference(uint96)):=(temporary_variable(uint96))', 'return']"
"('celo', 'contracts/stability/SortedOracles.sol', 'SortedOracles', 'removeExpiredReports')","['type_conversion(address)', 'binary(!=)', 'index(struct)', 'member', 'type_conversion(address)', 'binary(!=)', 'binary(&&)', 'index(struct)', 'member', 'binary(<)', 'binary(&&)', 'solidity_call(require(bool))', '(local_solc_variable(default, uint256)):=(constant(uint256))', 'binary(<)', 'condition(temporary_variable(bool))', 'index(struct)', 'member', '(local_solc_variable(default, address)):=(reference(address))', 'index(struct)', 'member', 'index(struct)', 'member', '(local_solc_variable(default, uint128)):=(reference(uint128))', 'type_conversion(uint128)', 'library_call_SafeMath_sub', 'type_conversion(uint128)', 'binary(>=)', 'condition(temporary_variable(bool))', 'internal_call(tuple)', '(temporary_variable(uint256)):=(local_solc_variable(default, uint256))', 'binary(+)']"
"('celo', 'contracts/stability/Exchange.sol', 'Exchange', 'getBuyTokenAmount')","['internal_call(tuple)', 'unpack', 'unpack', 'member', 'member', 'library_call_SafeMath_sub', 'library_call_SafeMath_mul', '(local_solc_variable(default, uint256)):=(temporary_variable(uint256))', 'library_call_SafeMath_mul', '(local_solc_variable(default, uint256)):=(temporary_variable(uint256))', 'member', 'library_call_SafeMath_mul', 'library_call_SafeMath_add', '(local_solc_variable(default, uint256)):=(temporary_variable(uint256))', 'library_call_SafeMath_div', 'return']"
"('celo', 'contracts/stability/SortedFractionMedianList.sol', 'SortedFractionMedianList', 'update')","['member', 'index(struct)', '(local_solc_variable(storage, SortedFractionMedianList.Element)):=(reference(user_defined_type))', 'type_conversion(address)', 'binary(!=)', 'binary(!=)', 'binary(&&)', 'binary(!=)', 'binary(&&)', 'internal_call(bool)', 'binary(&&)', 'solidity_call(require(bool,string))', 'internal_call(tuple)', 'internal_call(tuple)', 'unpack', 'unpack', 'internal_call(tuple)']"
"('celo', 'contracts/stability/Exchange.sol', 'Exchange', 'fallback')",[]
"('celo', 'contracts/stability/Reserve.sol', 'Reserve', 'burnToken')","['type_conversion(user_defined_type)', '(local_solc_variable(default, IStableToken)):=(temporary_variable(user_defined_type))', 'type_conversion(address)', 'high_level_call', 'high_level_call', 'solidity_call(require(bool,string))', 'return', 'internal_call(Modifier)']"
"('celo', 'contracts/common/GasPriceMinimum.sol', 'GasPriceMinimum', 'initialize')","['internal_call(tuple)', 'internal_call(tuple)', '(state_solc_variable(uint256)):=(local_solc_variable(memory, uint256))', 'internal_call(tuple)', 'internal_call(tuple)', 'internal_call(tuple)', 'internal_call(Modifier)']"
"('celo', 'contracts/governance/BondedDeposits.sol', 'BondedDeposits', 'initialize')","['internal_call(tuple)', 'internal_call(tuple)', '(state_solc_variable(uint256)):=(local_solc_variable(memory, uint256))', 'internal_call(Modifier)']"
"('celo', 'contracts/governance/Governance.sol', 'Governance', 'initialize')","['type_conversion(address)', 'binary(!=)', 'binary(!=)', 'binary(&&)', 'binary(!=)', 'binary(&&)', 'binary(!=)', 'binary(&&)', 'binary(!=)', 'binary(&&)', 'binary(!=)', 'binary(&&)', 'binary(!=)', 'binary(&&)', 'binary(!=)', 'binary(&&)', 'solidity_call(require(bool))', 'internal_call(tuple)', 'internal_call(tuple)', '(state_solc_variable(address)):=(local_solc_variable(memory, address))', '(state_solc_variable(uint256)):=(local_solc_variable(memory, uint256))', '(state_solc_variable(uint256)):=(local_solc_variable(memory, uint256))', '(state_solc_variable(uint256)):=(local_solc_variable(memory, uint256))', '(state_solc_variable(uint256)):=(local_solc_variable(memory, uint256))', 'member', '(reference(uint256)):=(local_solc_variable(memory, uint256))', 'member', '(reference(uint256)):=(local_solc_variable(memory, uint256))', 'member', '(reference(uint256)):=(local_solc_variable(memory, uint256))', '(state_solc_variable(uint256)):=(solidity_variablenow)', 'internal_call(Modifier)']"
"('celo', 'contracts/identity/Attestations.sol', 'Attestations', 'initialize')","['internal_call(tuple)', 'internal_call(tuple)', 'internal_call(tuple)', 'length', 'binary(>)', 'length', 'length', 'binary(==)', 'binary(&&)', 'solidity_call(require(bool,string))', '(local_solc_variable(default, uint256)):=(constant(uint256))', 'length', 'binary(<)', 'condition(temporary_variable(bool))', 'index(address)', 'index(uint256)', 'internal_call(tuple)', 'library_call_SafeMath_add', '(local_solc_variable(default, uint256)):=(temporary_variable(uint256))', 'internal_call(Modifier)']"
"('celo', 'contracts/identity/Escrow.sol', 'Escrow', 'initialize')","['internal_call(tuple)', 'internal_call(tuple)', 'internal_call(Modifier)']"
"('celo', 'contracts/stability/Reserve.sol', 'Reserve', 'initialize')","['internal_call(tuple)', 'internal_call(tuple)', '(state_solc_variable(uint256)):=(local_solc_variable(memory, uint256))', 'internal_call(Modifier)']"
"('celo', 'contracts/stability/StableToken.sol', 'StableToken', 'initialize')","['binary(!=)', 'binary(!=)', 'binary(&&)', 'solidity_call(require(bool,string))', 'internal_call(tuple)', '(state_solc_variable(uint256)):=(constant(uint256))', '(state_solc_variable(string)):=(local_solc_variable(calldata, string))', '(state_solc_variable(string)):=(local_solc_variable(calldata, string))', '(state_solc_variable(uint8)):=(local_solc_variable(memory, uint8))', 'member', 'new_structure', '(reference(user_defined_type)):=(temporary_variable(user_defined_type))', 'member', 'new_structure', '(reference(user_defined_type)):=(temporary_variable(user_defined_type))', 'member', '(reference(uint256)):=(local_solc_variable(memory, uint256))', 'member', '(reference(uint256)):=(solidity_variablenow)', 'internal_call(tuple)', 'internal_call(Modifier)']"
"('celo', 'contracts/stability/Exchange.sol', 'Exchange', 'initialize')","['internal_call(tuple)', 'internal_call(tuple)', '(state_solc_variable(address)):=(local_solc_variable(memory, address))', 'new_structure', '(state_solc_variable(user_defined_type)):=(temporary_variable(user_defined_type))', 'new_structure', '(state_solc_variable(user_defined_type)):=(temporary_variable(user_defined_type))', '(state_solc_variable(uint256)):=(local_solc_variable(memory, uint256))', '(state_solc_variable(uint256)):=(local_solc_variable(memory, uint256))', 'internal_call(tuple)', 'internal_call(Modifier)']"
"('celo', 'contracts/stability/SortedOracles.sol', 'SortedOracles', 'report')","['index(struct)', 'internal_call(struct)', '(local_solc_variable(memory, SortedFractionMedianList.Element)):=(temporary_variable(user_defined_type))', 'index(struct)', 'library_call', 'index(struct)', 'type_conversion(uint128)', 'internal_call(address)', 'type_conversion(address)', 'library_call', 'event', 'internal_call(tuple)', 'internal_call(Modifier)']"
"('celo', 'contracts/common/FractionUtil.sol', 'FractionUtil', 'isLessThanOrEqualTo')","['member', 'member', 'library_call_SafeMath_mul', 'member', 'member', 'library_call_SafeMath_mul', 'binary(<=)', 'return']"
"('celo', 'contracts/stability/Exchange.sol', 'Exchange', 'exchange')","['internal_call(uint256)', '(local_solc_variable(default, uint256)):=(temporary_variable(uint256))', 'binary(>=)', 'solidity_call(require(bool,string))', 'high_level_call', 'type_conversion(user_defined_type)', '(local_solc_variable(default, IReserve)):=(temporary_variable(user_defined_type))', 'condition(local_solc_variable(memory, bool))', 'library_call_SafeMath_add', '(state_solc_variable(uint256)):=(temporary_variable(uint256))', 'library_call_SafeMath_sub', '(state_solc_variable(uint256)):=(temporary_variable(uint256))', 'internal_call(contract)', 'type_conversion(address)', 'high_level_call', 'solidity_call(require(bool,string))', 'type_conversion(user_defined_type)', 'high_level_call', 'solidity_call(require(bool,string))', 'library_call_SafeMath_add', '(state_solc_variable(uint256)):=(temporary_variable(uint256))', 'library_call_SafeMath_sub', '(state_solc_variable(uint256)):=(temporary_variable(uint256))', 'type_conversion(user_defined_type)', 'type_conversion(address)', 'high_level_call', 'solidity_call(require(bool,string))', 'type_conversion(user_defined_type)', 'high_level_call', 'high_level_call', 'solidity_call(require(bool,string))', 'event', 'return', 'internal_call(Modifier)']"
"('celo', 'contracts/stability/Reserve.sol', 'Reserve', 'computeTobinTax')","['high_level_call', '(local_solc_variable(default, address)):=(temporary_variable(address))', 'type_conversion(user_defined_type)', '(local_solc_variable(default, ISortedOracles)):=(temporary_variable(user_defined_type))', 'type_conversion(address)', 'balance', '(local_solc_variable(default, uint256)):=(reference(uint256))', '(local_solc_variable(default, uint256)):=(constant(uint256))', '(local_solc_variable(default, uint256)):=(constant(uint256))', 'length', 'binary(<)', 'condition(temporary_variable(bool))', 'index(address)', 'high_level_call', 'unpack', 'unpack', 'index(address)', 'type_conversion(user_defined_type)', 'high_level_call', '(local_solc_variable(default, uint256)):=(temporary_variable(uint256))', 'library_call_SafeMath_mul', 'library_call_SafeMath_div', '(local_solc_variable(default, uint256)):=(temporary_variable(uint256))', 'library_call_SafeMath_add', '(local_solc_variable(default, uint256)):=(temporary_variable(uint256))', '(temporary_variable(uint256)):=(local_solc_variable(default, uint256))', 'binary(+)', 'binary(>=)', 'condition(temporary_variable(bool))', 'return', 'return']"
"('celo', 'contracts/identity/Attestations.sol', 'Attestations', 'request')","['index(uint256)', 'binary(>)', 'solidity_call(require(bool,string))', 'type_conversion(user_defined_type)', 'type_conversion(address)', 'index(uint256)', 'library_call_SafeMath_mul', 'high_level_call', 'solidity_call(require(bool,string))', 'binary(>)', 'solidity_call(require(bool,string))', 'index(struct)', 'member', 'type_conversion(address)', 'binary(!=)', 'condition(temporary_variable(bool))', 'index(struct)', 'member', 'internal_call(bool)', 'unary(!)', 'index(struct)', 'member', 'binary(==)', 'binary(||)', 'solidity_call(require(bool,string))', 'index(struct)', 'member', 'type_conversion(uint96)', '(reference(uint96)):=(temporary_variable(uint96))', 'index(struct)', 'member', '(reference(address)):=(local_solc_variable(memory, address))', 'index(struct)', '(local_solc_variable(storage, Attestations.IdentifierState)):=(reference(user_defined_type))', 'member', 'index(struct)', 'internal_call(tuple)', 'event']"
"('celo', 'contracts/identity/Attestations.sol', 'Attestations', 'addIncompleteAttestations')","['high_level_call', 'type_conversion(user_defined_type)', '(local_solc_variable(default, IRandom)):=(temporary_variable(user_defined_type))', 'high_level_call', '(local_solc_variable(default, bytes32)):=(temporary_variable(bytes32))', 'internal_call(address[])', '(local_solc_variable(memory, address[])):=(temporary_variable(address[]))', '(local_solc_variable(default, uint256)):=(constant(uint256))', 'binary(<)', 'condition(temporary_variable(bool))', 'solidity_call(abi.encodePacked())', 'solidity_call(keccak256(bytes))', '(local_solc_variable(default, bytes32)):=(temporary_variable(bytes32))', 'type_conversion(uint256)', 'length', 'binary(%)', 'index(address)', '(local_solc_variable(default, address)):=(reference(address))', 'member', 'index(struct)', '(local_solc_variable(storage, Attestations.Attestation)):=(reference(user_defined_type))', 'member', 'member', 'binary(!=)', 'condition(temporary_variable(bool))', '(temporary_variable(uint256)):=(local_solc_variable(default, uint256))', 'binary(+)', 'member', 'member', '(reference(user_defined_type)):=(reference(user_defined_type))', 'member', 'type_conversion(uint128)', '(reference(uint128)):=(temporary_variable(uint128))', 'member', 'push(local_solc_variable(default, address),reference(address[]))', 'length']"
"('celo', 'contracts/common/MultiSig.sol', 'MultiSig', 'replaceOwner')","['(local_solc_variable(default, uint256)):=(constant(uint256))', 'length', 'binary(-)', 'binary(<)', 'condition(temporary_variable(bool))', 'index(address)', 'binary(==)', 'condition(temporary_variable(bool))', 'index(address)', '(reference(address)):=(local_solc_variable(memory, address))', '(temporary_variable(uint256)):=(local_solc_variable(default, uint256))', 'binary(+)', 'index(bool)', '(reference(bool)):=(constant(bool))', 'index(bool)', '(reference(bool)):=(constant(bool))', 'event', 'event', 'internal_call(Modifier)', 'internal_call(Modifier)', 'internal_call(Modifier)']"
"('celo', 'contracts/identity/Escrow.sol', 'Escrow', 'revoke')","['index(struct)', '(local_solc_variable(memory, Escrow.EscrowedPayment)):=(reference(user_defined_type))', 'member', 'binary(==)', 'solidity_call(require(bool,string))', 'member', 'member', 'binary(+)', 'binary(>=)', 'solidity_call(require(bool,string))', 'internal_call(tuple)', 'member', 'type_conversion(user_defined_type)', 'member', 'high_level_call', 'solidity_call(require(bool,string))', 'member', 'member', 'member', 'member', 'event', 'return', 'internal_call(Modifier)']"
"('vbm', 'src/smart-contracts/contracts/ElectionVerification.sol', 'ElectionVerification', 'addBallotTemplateHash')","['index(struct)', 'member', '(reference(uint256)):=(local_solc_variable(memory, uint256))', 'index(struct)', 'member', '(reference(bytes32)):=(local_solc_variable(memory, bytes32))', 'binary(+)', 'return']"
"('vbm', 'src/smart-contracts/contracts/Election.sol', 'Election', 'Existing')","['type_conversion(user_defined_type)', '(state_solc_variable(user_defined_type)):=(temporary_variable(user_defined_type))']"
"('vbm', 'src/smart-contracts/contracts/VoterRegistry.sol', 'VoterRegistry', 'recordDenial')","['index(struct)', 'member', 'new_structure', '(reference(user_defined_type)):=(temporary_variable(user_defined_type))', 'push(local_solc_variable(memory, address),state_solc_variable(address[]))', 'length', 'event']"
"('vbm', 'src/smart-contracts/contracts/Migrations.sol', 'Migrations', 'Migrate')",['(state_solc_variable(address)):=(solidity_variable_composed(msg.sender))']
"('uma', 'contracts/TokenizedDerivative.sol', 'TokenizedDerivativeUtils', '_computeNavForTokens')","['internal_call(int256)', 'library_call', 'library_call', '(local_solc_variable(memory, int256)):=(temporary_variable(int256))']"
"('uma', 'contracts/CentralizedStore.sol', 'CentralizedStore', 'computeOracleFees')","['library_call_SafeMath_sub', '(local_solc_variable(default, uint256)):=(temporary_variable(uint256))', 'library_call_SafeMath_mul', 'library_call_SafeMath_mul', 'library_call_SafeMath_div', 'return']"
"('uma', 'contracts/TokenizedDerivative.sol', 'TokenizedDerivativeUtils', '_updateBalances')","['library_call', '(local_solc_variable(default, int256)):=(temporary_variable(int256))', 'member', '(reference(int256)):=(local_solc_variable(memory, int256))', 'member', 'member', 'library_call', '(reference(int256)):=(temporary_variable(int256))', 'member', 'member', 'library_call', '(reference(int256)):=(temporary_variable(int256))']"
"('ocean-protocol', 'contracts/EpochLibrary.sol', 'EpochLibrary', 'create')","['binary(>=)', 'solidity_call(require(bool,string))', 'binary(>=)', 'solidity_call(require(bool,string))', 'binary(>)', 'binary(>)', 'binary(&&)', 'condition(temporary_variable(bool))', 'binary(<)', 'solidity_call(require(bool,string))', 'member', 'index(struct)', 'new_structure', '(reference(user_defined_type)):=(temporary_variable(user_defined_type))', 'member', 'push(local_solc_variable(memory, bytes32),reference(bytes32[]))', 'length', 'member', 'length', 'return']"
"('ocean-protocol', 'contracts/libraries/EpochLibrary.sol', 'EpochLibrary', 'create')","['binary(>=)', 'solidity_call(require(bool,string))', 'binary(>=)', 'solidity_call(require(bool,string))', 'binary(>)', 'binary(>)', 'binary(&&)', 'condition(temporary_variable(bool))', 'binary(<)', 'solidity_call(require(bool,string))', 'member', 'index(struct)', 'new_structure', '(reference(user_defined_type)):=(temporary_variable(user_defined_type))', 'member', 'push(local_solc_variable(memory, bytes32),reference(bytes32[]))', 'length', 'member', 'length', 'return']"
"('ocean-protocol', 'contracts/libraries/EpochLibrary.sol', 'EpochLibrary', 'getEpochTimeOut')","['member', 'member', 'library_call_SafeMath_add', 'return']"
"('ocean-protocol', 'contracts/libraries/EpochLibrary.sol', 'EpochLibrary', 'getEpochTimeLock')","['member', 'member', 'library_call_SafeMath_add', 'return']"
"('ocean-protocol', 'contracts/registry/DIDRegistryLibrary.sol', 'DIDRegistryLibrary', 'update')","['member', 'index(struct)', 'member', '(local_solc_variable(default, address)):=(reference(address))', 'type_conversion(address)', 'binary(==)', 'condition(temporary_variable(bool))', '(local_solc_variable(default, address)):=(solidity_variable_composed(msg.sender))', 'member', 'index(struct)', 'new_structure', '(reference(user_defined_type)):=(temporary_variable(user_defined_type))', 'member', 'push(local_solc_variable(memory, bytes32),reference(bytes32[]))', 'length', 'member', 'length', 'return']"
"('ocean-protocol', 'contracts/conditions/Condition.sol', 'Condition', 'fulfill')","['high_level_call', 'return']"
"('ocean-protocol', 'contracts/conditions/rewards/EscrowReward.sol', 'EscrowReward', '_transferAndFulfill')","['high_level_call', 'solidity_call(require(bool,string))', 'member', 'member', 'internal_call(enum)', 'return']"
"('ocean-protocol', 'contracts/OceanToken.sol', 'OceanToken', 'initialize')","['(local_solc_variable(default, uint256)):=(constant(uint256))', 'binary(**)', 'library_call_SafeMath_mul', '(local_solc_variable(default, uint256)):=(temporary_variable(uint256))', 'internal_call(tuple)', 'internal_call(tuple)', 'internal_call(tuple)', 'internal_call(tuple)', 'internal_call(Modifier)']"
"('ocean-protocol', 'contracts/Dispenser.sol', 'Dispenser', 'initialize')","['internal_call(tuple)', '(state_solc_variable(uint256)):=(constant(uint256))', 'type_conversion(user_defined_type)', '(state_solc_variable(user_defined_type)):=(temporary_variable(user_defined_type))', 'high_level_call', 'type_conversion(uint256)', 'binary(**)', '(state_solc_variable(uint256)):=(temporary_variable(uint256))', 'type_conversion(uint256)', 'library_call_SafeMath_mul', '(state_solc_variable(uint256)):=(temporary_variable(uint256))', '(state_solc_variable(uint256)):=(constant(uint256))', 'type_conversion(uint256)', 'library_call_SafeMath_mul', '(state_solc_variable(uint256)):=(temporary_variable(uint256))', 'internal_call(Modifier)', 'internal_call(Modifier)']"
